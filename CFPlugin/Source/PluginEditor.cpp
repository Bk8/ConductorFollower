/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
CfpluginAudioProcessorEditor::CfpluginAudioProcessorEditor (CfpluginAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
	, ownerFilter(ownerFilter)
	//, playButton(0)
	, speedLabel(nullptr)
	, runningLabel(nullptr)
{
    // This is where our plugin's editor size is set.
    setSize (400, 300);

	/*
	addAndMakeVisible(playButton = new TextButton("Play"));
	playButton->setBounds(0, 0, 100, 100);
	playButton->addListener(this);
	*/

	addAndMakeVisible(speedLabel = new Label("", "0.0"));
	speedLabel->setBounds(0, 0, 400, 30);

	addAndMakeVisible(runningLabel = new Label("", "not running"));
	runningLabel->setBounds(0, 40, 400, 30);

	ownerFilter->changeBroadcaster.addChangeListener(this);
}

CfpluginAudioProcessorEditor::~CfpluginAudioProcessorEditor()
{
	ownerFilter->changeBroadcaster.removeChangeListener(this);
	deleteAllChildren();
}

//==============================================================================
void CfpluginAudioProcessorEditor::paint (Graphics& g)
{
	g.fillAll (Colours::white);

	/*
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!",
                      0, 0, getWidth(), getHeight(),
                      Justification::centred, 1);
	*/

	
}

void
CfpluginAudioProcessorEditor::buttonClicked(Button * button)
{
	/*
	if (button == playButton) {
		ownerFilter->shouldRun.store(!ownerFilter->shouldRun.load());
	}
	*/
}

void
CfpluginAudioProcessorEditor::buttonStateChanged(Button * button)
{

}


void
CfpluginAudioProcessorEditor::changeListenerCallback(ChangeBroadcaster *source)
{
	bool running;
	double speed;

	using cf::ScoreFollower::FollowerStatus;
	FollowerStatus & status = ownerFilter->followerStatus();

	if (status.running.LoadIfChanged(running)) {
		runningLabel->setText(running ? "Running" : "Not running", true);
	}

	if (status.speed.LoadIfChanged(speed)) {
		speedLabel->setText(String(speed), true);
	}
}

