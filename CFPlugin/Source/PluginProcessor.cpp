/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "ScoreFollower/TimeUtils.h"

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "MidiReader.h"

using namespace cf;
using namespace cf::ScoreFollower;

//==============================================================================
CfpluginAudioProcessor::CfpluginAudioProcessor()
	: shouldRun(false)
	, running_(false)
{
}

CfpluginAudioProcessor::~CfpluginAudioProcessor()
{
}

//==============================================================================
const String CfpluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int CfpluginAudioProcessor::getNumParameters()
{
    return 0;
}

float CfpluginAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void CfpluginAudioProcessor::setParameter (int index, float newValue)
{
}

const String CfpluginAudioProcessor::getParameterName (int index)
{
    return String::empty;
}

const String CfpluginAudioProcessor::getParameterText (int index)
{
    return String::empty;
}

const String CfpluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String CfpluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool CfpluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    return false;
}

bool CfpluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return false;
}

bool CfpluginAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool CfpluginAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int CfpluginAudioProcessor::getNumPrograms()
{
    return 0;
}

int CfpluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void CfpluginAudioProcessor::setCurrentProgram (int index)
{
}

const String CfpluginAudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void CfpluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void CfpluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
	samplerate_ = sampleRate;
	blockSize_ = samplesPerBlock;

	MidiReader reader("C:\\sample.mid");
	follower_.CollectData(reader);
}

void CfpluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void CfpluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getSampleData (channel);
    }

    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }


	/************************************************************************************/

	if (!shouldRun.load()) {
		running_ = false;
		return;
	}

	auto currentBlock = TimeUtils::GetTimeSpanEstimateForAudioBlock(blockSize_, samplerate_);

	if (!running_) {
		// Fix first time around
		running_ = true;
		estimatedEndForPrevBuffer = currentBlock.first;
		follower_.FixTimeMapping(currentBlock.first, score_time_t::zero());
	}

	// Fix jitter
	if (currentBlock.first > estimatedEndForPrevBuffer) {
		PlaySamplesBetween(midiMessages, estimatedEndForPrevBuffer, currentBlock.first, 0);
		PlaySamplesBetween(midiMessages, currentBlock.first, currentBlock.second, &currentBlock.first);
	} else if (currentBlock.first < estimatedEndForPrevBuffer) {
		PlaySamplesBetween(midiMessages, estimatedEndForPrevBuffer, currentBlock.second, &currentBlock.first);
	} else {
		PlaySamplesBetween(midiMessages, currentBlock.first, currentBlock.second, &currentBlock.first);
	}

	estimatedEndForPrevBuffer = currentBlock.second;
}

void CfpluginAudioProcessor::PlaySamplesBetween(
	MidiBuffer& midiMessages,
	cf::timestamp_t begin, cf::timestamp_t end,
	cf::timestamp_t * reference)
{
	// TODO get all tracks
	auto events = follower_.GetEventsBetween(1, begin, end);

	while(!events.AtEnd()) {
		MidiMessage message = events.data();

		seconds_t seconds(message.getTimeStamp());
		score_time_t scoreTime = time::duration_cast<score_time_t>(seconds);

		int sample = 0;
		if (reference != 0) {
			real_time_t time = follower_.ScoreToRealTime(*reference, scoreTime);
			sample = TimeUtils::DurationToSamples(time - *reference, samplerate_);
		}

		assert(sample >= 0);
		assert(sample < blockSize_);
		
		midiMessages.addEvent(message, sample);
		events.Next();
	}
}

//==============================================================================
bool CfpluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* CfpluginAudioProcessor::createEditor()
{
    return new CfpluginAudioProcessorEditor (this);
}

//==============================================================================
void CfpluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void CfpluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new CfpluginAudioProcessor();
}
